27c27keepR
< 	print MASTER "perl $0 ".join (" ",@ARGV)." -g -T 2 \n"; 
---
> 	print MASTER "perl $0 ".join (" ",@ARGV)." -T 2\n"; 
29c29keepR
< 	exec ("qsub -q small -N PBS_$dir PBS.MASTER\n");
---
> 	exec ("qsub -q grande -N PBS_$dir PBS.MASTER\n");
40,41c40,41 merged2
< use vars qw($opt_E $opt_R $opt_A $opt_w $opt_z $opt_F $opt_x $opt_m $opt_H $opt_f $opt_a $opt_o $opt_i $opt_d $opt_T  $opt_h $opt_t $opt_c $opt_g $opt_n $opt_l $opt_b $opt_B $opt_k $opt_r $opt_s $opt_N $opt_v $opt_S $opt_p);
<  getopts("f:o:c:d:i:T:t:l:B:k:p:m:F:A:rvRzsbcaehxgnHEINSw");
---
> use vars qw($opt_G $opt_w $opt_z $opt_F $opt_x $opt_m $opt_H $opt_f $opt_a $opt_o $opt_i $opt_d $opt_T  $opt_h $opt_t $opt_c $opt_g $opt_n $opt_l $opt_b $opt_B $opt_k $opt_r $opt_s $opt_N $opt_v $opt_S $opt_p);
>  getopts("f:o:c:d:i:T:t:l:B:k:p:m:F:G:rvzsbcaehxgnHINSw");
68,69c68,69 keep L
< 		-x <do not use strict>
< 			If possible, AVIA uses filter annot option to use the exact alleles to annotate, not allowing for any base
---
> 		-x <use strict>
> 			If possible uses filter annot option to use the exact alleles to annotate, not allowing for any base
71d70 keep
< 			if specified, it will turn OFF this functionality and be more lenient for annotation
74,78c73,75 keepR
< 		-F <annovar|database>
< 			annovar - goes through the annovar filtering steps and returns only with genes with coding variants
< 			 1) mce_44way 2)segdup 3) All sites from 1000G 4)ceu/yri/jpt 5)dbsnp
< 			database - goes through the user-specified databases and returns only with genes with variants
< 				-this option maybe be a subset or completely different than "annovar", depending on the -f option supplied
---
> 		-F <file with filtering order and instructions on which files to keep>
> 			input file looks like (one per line)
> 				(1000g|hapmap|snp135|pp2|siftv63)\t(filtered|dropped|dropcutoff|keepcutoff)\tcutoff value (if cutoff)
80,83c77 keep
< 		-A <allele frequency file>
< 		-R <rename headers and adds the filename to the beginning column>
< 				#renames the headers of the output file to a more reader friendly format
< 				#also adds the filename as a column at the beginning of the file e.g. name_header_column=1 in config file
--- keep
> 		-G <specify a gene list in which to filter your output>
113c107 keep L
< my $annovar="perl $bin/annotate_variation_ABCC2.pl";
---
> my $annovar="perl $bin/annotate_variation_ABCC.pl";
118a113,114 keepR
> my %flg;#keeps track of different flags
> my $convertible='FOO';#this is the tag that means that there was a conversion betwen two versions of the genome
120,121c116,183
< #my $annovar_output="allANNOVAR.input.uniq.variant_function";
< #collapseANNOVAR($annovar_output);exit;
---
> #filtering
> my $filter_cmd;
> if (defined $opt_F){
> 	#this is for cascade filtering
> 	#order of file does not matter
> 	open (FILTERDB,"<$opt_F") or die "Cannot open filter database\n";
> 	my $dbdir='/SeqIdx/annovardb/'.$orgdb;
> 	#fill these in with the order from the web
> 	my %order=('hapmap_3.3'=>1,
> 		'1000gALL_sites_2012_04'=>2,
> 		'avsift'=>3,
> 		'ljb_pp2'=>4,
> 		'snp135'=>5
> 	);
> 	while (my $line=<FILTERDB>){
> 		chomp $line;my $threshold;
> 		next if ($line=~/^\s+$/);
> 		my ($dbfile,$keep,$cutoff)=split("\t",$line);
> 		if (exists $order{$dbfile}){
> 			$order{$dbfile}.=1;print "adding $dbfile from $line\n";
> 		}else{
> 			$order{$dbfile}='01';
> 		}
> 		if ($dbfile=~/(1000g|snp)/){
> 			$threshold='--maf_threshold';
> 		}elsif ($dbfile=~/avsift/){
> 			$threshold='--sift_threshold';
> 		}else{
> 			$threshold='--score_threshold';
> 		}
> 		if ($keep=~/(filtered|dropped)/){
> 			my $input;#we do this to build the query below for input; placeholder for the name based on FOO or BAR
> 			if ($keep=~/dropped/){
> 				$input="BAR";
> 			}else{
> 				$input="FOO";
> 			}
> 			$order{$dbfile}.="$annovar --buildver $opt_o --dbtype $dbfile --filter $input $dbdir\n";
> 		}elsif($keep=~/keepcutoff/){
> 			$order{$dbfile}.="$annovar --buildver $opt_o --dbtype $dbfile  --filter $threshold $cutoff --reverse FOO $dbdir\n";
> 		}elsif($keep=~/dropcutoff/){
> 			$order{$dbfile}.="$annovar --buildver $opt_o --dbtype $dbfile  --filter $threshold $cutoff FOO $dbdir\n";
> 		}
> 		#make sure the next file exists before inserting into next command
> 		
> 	}
> 	my $input=$opt_i;
> 	foreach my $key (sort {$order{$a} cmp $order{$b} } keys %order){#most efficient way to sort
> 		$order{$key}=~s/^\d\d//g;$order{$key}=~s/(FOO|BAR)/$input/;
> 		my $dropped=$1;
> 		my $dbfile = ($order{$key}=~/\-\-dbtype\s(\S+)\s/)?$1:'';
> 		next if (!$dbfile);
> 		$filter_cmd.="$order{$key}";
> 		$input=($dropped=~/BAR/)?"$input.$opt_o\_$dbfile\_dropped":"$input.$opt_o\_$dbfile\_filtered";
> 		print "$order{$key}\n";
> 	}
> 	my $id=printPBS("filter", '8',$filter_cmd);
> 	print STDERR "Monitoring filter queries $id\n";
> 	die "Could not submit $filter_cmd to the grid\n" if (!$id);
> 	my $notDone=monitor ("qstat | grep $id") ;
> 	if ($notDone){
> 		die "Could not filter your stuff\n";
> 	}
> 	print STDERR "Continuing with your data\n";
> 	
> 	#now transfer your input file to your $opt_i to use
> 	$opt_i=$input;$flg{'cascade'}++;
> }
133d194 keep
< push (@files, $opt_A) if (defined $opt_A && -e $opt_A);
139,140c200,201 keepR
< my $use_strict=1;
< $use_strict=(defined $opt_x)?0:1;
---
> my $use_strict;
> $use_strict=(defined $opt_x)?1:0;
177,181c238 keep L
< 		my $ensembl='';
< 		if ($opt_E){
< 			$ensembl=" --dbtype ensgene ";#die "using ensembl\n";
< 		}
< 		my $annot="$annovar --buildver $opt_o $opt_c --geneanno $ensembl --keepline --relpos --silent $opt_i\_$k $opt_d";
---
> 		my $annot="$annovar --buildver $opt_o $opt_c --geneanno --keepline --relpos --silent $opt_i\_$k $opt_d";
184,185d240 keepL
< 		}else{
< #			$annot.=";perl $bin/../find_and_predict_NMD_indels.pl -i $opt_i\_$k.variant_function.collapsed";
220c275 keepL
< 				$files[$i]=~s/[\r\n]*$//;my ($db_dir,$db_file);
---
> 				chomp $files[$i];my ($db_dir,$db_file);
229,235d283 keepL
< 					if (!-e "$opt_d/$files[$i]" && -e "./$files[$i]"){
< 						$db_dir="./";
< 					}
< 				}
< 				if ($files[$i]=~/\_af$/){
< 					$af=$db_file ;
< 					 next;
236a285,287 keepR
> 				$flg{'sift'}++ if ($files[$i]=~/sift/i);
> 				$af++ and next if ($files[$i]=~/\_af$/);
> 				$convertible='hg19_hg18converted.txt' and next if ($files[$i]=~/hg19_hg18converted/);
265,267c316
< 				}elsif ($db_file=~/cosmicdb/ && $use_strict){
< 					$toDo="$annovar --buildver $opt_o --dbtype generic --genericdbfile $opt_o\_$db_file.txt --filter --keepline $addon --silent $opt_i\_$k $db_dir";
< 				}elsif ($db_file=~/(hg19_.*hom_only|cosmicdb)/ &&  $use_strict){
---
> 				}elsif ($db_file=~/(hg19_.*hom_only|cosmicdb|hg19_CG-.*AllFreq)/ &&  $use_strict){
308c357,359 keepR 
< 		next if ($files[$i]=~/hg19_af/);
---
> 		$flg{'sift'}++ if ($files[$i]=~/sift/);
> 		$af++ and next if ($files[$i]=~/hg19_af$/);
> 		next if ($files[$i]=~/$convertible$/);
314,316c365,367 keep L
< 			print "Running system(2nd attempt): ls | grep  $opt_i\_$k\.$filename | grep -e filtered -e exact | grep -ve tmp\n";
< 			$file=`ls | grep  $opt_i\_$k\.$filename | grep -e filtered -e exact | grep -ve tmp`;chomp $file;
< 			print "\tworking for ($file)\n";
---
> 			print "Running system(2nd attempt): ls | grep  $opt_i\_$k\.$filename | grep filtered \n";
> 			$file=`ls | grep  $opt_i\_$k\.$filename | grep filtered`;chomp $file;
> 			print "\tworking for $file\n";
350,356c401 keepL
< 			my $annot_ver;
< 			if ($opt_E){
< 				$annot_ver="Ensembl v.63";
< 			}else{
< 				$annot_ver="NCBI v37";
< 			}
< 			print COLLAPSED join ("\t","#ANNOVAR annot $annot_ver","Gene","Rel pos to feature(s)","Gene Ori","Chr","Query Start","Query End","Allele1","Allele2","Comment")."\n" ;
---
> 			print COLLAPSED join ("\t","#ANNOVAR annot","Gene","Rel pos to feature(s)","Gene Ori","Chr","Query Start","Query End","Allele1","Allele2","Comment")."\n" ;
403a449,458 keepR
> 	if (exists $flg{'sift'} && $flg{'sift'}){
> 		system ("perl $bin/../find_and_predict_NMD_indels.pl -i $out\_$k.output -o $out\_$k.PredIndel \n");
> 		print "Running $bin/../find_and_predict_NMD_indels.pl -i $out\_$k.output -o $out\_$k.PredIndel\n";<STDIN>;
> 		if (-e "$out\_$k.PredIndel" && !-z "$out\_$k.PredIndel"){
> 			eval{system ("mv $out\_$k.PredIndel $out\_$k.output\n");};
> 			if ($?){
> 				warn "could not move $out\_$k.PredIndel to $out\_$k.output(ok)\n"; 
> 			}
> 		}
> 	}
420,423c475 keepL all
< 	if ($opt_R){
< 		system ("perl $bin/rename_headers.pl $out.output\n");
< 	}
< 	system ("cp $out.output $out.headers.output\n");
---
> 	system ("cp $out.output headers.output\n");
457c509 null
< #cleanup($ct);
---
> cleanup($ct);
459a512,513 keepR
> $af=" ANNOVAR.input.hg19_af " if ($af);
> my $addon='';
471a526 keepR
> 	$addon="$opt_z.wHeaders ";
473,474d527
< }elsif ($af){
< 	system("paste $af $out.output> $out.output1;mv $out.output1 $out.output;\n");
475a529,539 keepR
> if ($af){
> 	$addon=$af." ";
> 	
> }
> if (-e "config.ini" && -e "$convertible" && !-z "$convertible"){
> 	$addon="$convertible ";
> }
> if ($addon){
> 	system("paste $addon $out.output> $out.output1;mv $out.output1 $out.output;\n");
> }
>  
481c545 keepR
< if (-e "config.ini" && `grep ^name_column_header=1 config.ini | wc -l`==1){
---
> if (`grep ^name_column_header=1 config.ini | wc -l`==1){
483c547 null
< 	if ( $id=`grep ^file= config.ini`){
---
> 	if ($id=`grep ^file= config.ini`){
486c550 null
< 	}elsif ( $id=`grep '^input_fullpath=' config.ini`){
---
> 	}elsif ($id=`grep '^input_fullpath=' config.ini`){
489,492d552 keepL
< 	}else{
< 		$id=$opt_i;
< 		$id=~s/(hg19\_|\_Blood|\_tumor)//i;
< 		$id=~s/(^\d+\.|\.txt|\.vcf)//g;
498,499c558 keepL
< #			system (" awk -F '^' '{print \"$id\",\$1}' OFS='\\t' $out.output >> .$out.output\n");
< 			system ("awk -F '^' '{if ( NR==1 )  print \"#SampleName\",\$1  ; else print \"$id\",\$1  }' OFS='\\t' $out.output > .$out.output\n");
---
> 			system (" awk -F '^' '{print \"$id\",\$1}' OFS='\\t' $out.output > .$out.output\n");
504,506d562 keepL
< 		if ($opt_R && !-z ".$out.output"){
< 			system ("mv .$out.output $out.output\n");
< 		}
634c690
< }
\ No newline at end of file
---
> }
